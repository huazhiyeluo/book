{"common/preface.html":{"url":"common/preface.html","title":"前言","keywords":"","body":""},"db/db.html":{"url":"db/db.html","title":"1. 数据库篇","keywords":"","body":"1. memcached 安装 配置说明 命令 2. redis 安装 配置说明 命令 3. mongodb 安装 配置说明 命令 4. sqlite3 安装 配置说明 命令 5. mysql 安装 配置说明 命令 "},"db/memcached.html":{"url":"db/memcached.html","title":"1.1 memcached","keywords":"","body":"1. 安装 wget http://memcached.org/latest 下载最新版本tar -zxvf memcached-1.x.x.tar.gz 解压源码cd memcached-1.x.x 进入目录./configure --prefix=/usr/local/memcached 配置make && make test 编译sudo make install 安装 2. 配置说明 启动方式： /usr/local/bin/memcached -d -m 1024 -u root -l 127.0.0.1 -p 11211 -c 1024 -P /tmp/memcached.pid -d 是启动一个守护进程； -m 是分配给Memcache使用的内存数量，单位是MB； -u 是运行Memcache的用户； -l 是监听的服务器IP地址，可以有多个地址； -p 是设置Memcache监听的端口，，最好是1024以上的端口； -c 是最大运行的并发连接数，默认是1024； -P 是设置保存Memcache的pid文件。访问方式：telnet IP PORT 3. 命令 1.设置命令 1、set：如果set的key已经存在，该命令可以更新该key所对应的原来的数据，也就是实现更新的作用。 set key flags exptime bytes [noreply] value 2、add：如果 add 的 key 已经存在，则不会更新数据(过期的 key 会更新)，之前的值将仍然保持相同，并且您将获得响应 NOT_STORED。 add key flags exptime bytes [noreply] value 3、replace：如果 key 不存在，则替换失败，并且您将获得响应 NOT_STORED。 replace key flags exptime bytes [noreply] value 4、append：Memcached append 命令用于向已存在 key(键) 的 value(数据值) 后面追加数据 。 append key flags exptime bytes [noreply] value 5、prepend：Memcached prepend 命令用于向已存在 key(键) 的 value(数据值) 前面追加数据 。 prepend key flags exptime bytes [noreply] value 6、cas：Memcached CAS（Check-And-Set 或 Compare-And-Swap） 命令用于执行一个\"检查并设置\"的操作.它仅在当前客户端最后一次取值后，该key 对应的值没有被其他客户端修改的情况下， 才能够将值写入。检查是通过cas_token参数进行的， 这个参数是Memcach指定给已经存在的元素的一个唯一的64位值。 cas key flags exptime bytes unique_cas_token [noreply] value cas tp 0 900 9 ERROR #缺少 token cas tp 0 900 9 2 memcached NOT_FOUND #键 tp 不存在 set tp 0 900 9 memcached STORED gets tp VALUE tp 0 9 1 memcached END cas tp 0 900 5 1 redis STORED get tp VALUE tp 0 5 redis END 参数说明如下： key：键值 key-value 结构中的 key，用于查找缓存值。 flags：可以包括键值对的整型参数，客户机使用它存储关于键值对的额外信息 。 exptime：在缓存中保存键值对的时间长度（以秒为单位，0 表示永远） bytes：在缓存中存储的字节数 unique_cas_token通过 gets 命令获取的一个唯一的64位值。 noreply（可选）： 该参数告知服务器不需要返回数据 value：存储的值（始终位于第二行）（可直接理解为key-value结构中的value） 2.查找命令 1、get：Memcached get 命令获取存储在 key(键) 中的 value(数据值) ，如果 key 不存在，则返回空。 get key get key1 key2 key3 2、gets：Memcached gets 命令获取带有 CAS 令牌存 的 value(数据值) ，如果 key 不存在，则返回空。 gets key gets key1 key2 key3 3、delete：Memcached delete 命令用于删除已存在的 key(键)。 delete key [noreply] 4、incr/decr：Memcached incr 与 decr 命令用于对已存在的 key(键) 的数字值进行自增或自减操作。incr 与 decr 命令操作的数据必须是十进制的32位无符号整数。如果 key 不存在返回 NOT_FOUND，如果键的值不为数字，则返回 CLIENT_ERROR，其他错误返回 ERROR。 append key flags exptime bytes [noreply] value 3.统计命令 1、stats：Memcached stats 命令用于返回统计信息例如 PID(进程号)、版本号、连接数等。 stats 2、stats items：Memcached stats items 命令用于显示各个 slab 中 item 的数目和存储时长(最后一次访问距离现在的秒数)。 stats items 3、stats slabs：Memcached stats slabs 命令用于显示各个slab的信息，包括chunk的大小、数目、使用情况等。 stats slabs 4、stats sizes：Memcached stats sizes 命令用于显示所有item的大小和个数。该信息返回两列，第一列是 item 的大小，第二列是 item 的个数。 stats sizes 5、flush_all：Memcached flush_all 命令用于清理缓存中的所有 key=>value(键=>值) 对。该命令提供了一个可选参数 time，用于在制定的时间后执行清理缓存操作。 flush_all [time] [noreply] 6、stats detail [on|off|dump]：设置或者显示详细操作记录 stats detail [on|off|dump] 7、stats cachedump slab_id limit_num：显示某个slab中的前limit_num个key列表. stats cachedump 7 2 8、stats reset：清空统计数据 stats reset 4.其他信息 1、统计信息（stats） 参数 值 描述 pid 1700 memcache服务器进程ID uptime 5335604 服务器已运行秒数 time 1557036895 服务器当前Unix时间戳 version 1.5.10 memcache版本 libevent 2.0.21-stable libevent版本 pointer_size 64 操作系统指针大小 rusage_user 805.137191 进程累计用户时间 rusage_system 460.201782 进程累计系统时间 max_connections 256 curr_connections 3 当前连接数量 total_connections 7742 Memcached运行以来连接总数 rejected_connections 0 connection_structures 5 Memcached分配的连接结构数量 reserved_fds 20 内部使用的FD数 cmd_get 6977 get命令请求次数 cmd_set 193 set命令请求次数 cmd_flush 0 flush命令请求次数 cmd_touch 0 touch命令请求次数 get_hits 6767 get命令命中次数 get_misses 210 get命令未命中次数 get_expired 1 get_flushed 0 delete_misses 4 delete命令未命中次数 delete_hits 4 delete命令命中次数 incr_misses 0 incr命令未命中次数 incr_hits 0 incr命令命中次数 decr_misses 0 decr命令未命中次数 decr_hits 0 decr命令命中次数 cas_misses 0 cas命令未命中次数 cas_hits 0 cas命令命中次数 cas_badval 0 使用擦拭次数 touch_hits 0 touch命令命中次数 touch_misses 0 touch命令未命中次数 auth_cmds 0 认证命令处理的次数 auth_errors 0 认证失败数目 bytes_read 9227571 读取总字节数 bytes_written 63626954 发送总字节数 limit_maxbytes 67108864 分配的内存总大小（字节） accepting_conns 1 接受新的连接 listen_disabled_num 0 失效的监听数 time_in_listen_disabled_us 0 threads 4 当前线程数 conn_yields 0 连接操作主动放弃数目 hash_power_level 16 hash表等级 hash_bytes 524288 当前hash表大小 hash_is_expanding 0 hash表正在扩展 slab_reassign_rescues 0 slab_reassign_chunk_rescues 0 slab_reassign_evictions_nomem 0 slab_reassign_inline_reclaim 0 slab_reassign_busy_items 0 slab_reassign_busy_deletes 0 slab_reassign_running 0 slabs_moved 0 lru_crawler_running 0 lru_crawler_starts 384795 lru_maintainer_juggles 32123450 malloc_fails 0 log_worker_dropped 0 log_worker_written 0 log_watcher_skipped 0 log_watcher_sent 0 bytes 1714945 当前存储占用的字节数 curr_items 6 当前存储的数据总数 total_items 193 启动以来存储的数据总数 slab_global_page_pool 0 expired_unfetched 9 已过期但未获取的对象数目 evicted_unfetched 0 已驱逐但未获取的对象数目 evicted_active 0 evictions 0 LRU释放的对象数目 reclaimed 171 已过期的数据条目来存储新数据的数目 crawler_reclaimed 1 crawler_items_checked 6406 lrutail_reflocked 3584 moves_to_cold 6295 moves_to_warm 6104 moves_within_lru 258 direct_reclaims 0 lru_bumps_dropped 0 2、区块信息（stats slabs） 参数 值 描述 active_slabs 10 slab数量 total_malloced 11534336 总内存数量 选择内存区块：SLAB : 1 参数 值 描述 chunk_size 96 chunk大小（byte） chunks_per_page 10922 每个page的chunk数量 total_pages 1 page数量 total_chunks 10922 chunk总数量（chunks_per_page*total_pages） used_chunks 0 已被分配的chunk数量 free_chunks 10922 过期数据空出的chunk数 free_chunks_end 0 从未被使用过的chunk数 mem_requested 0 请求存储的字节数 get_hits 2 get命令命中数 cmd_set 2 set命令请求数 delete_hits 0 delete命令命中数 incr_hits 0 incr命令命中数 decr_hits 0 decr命令命中数 cas_hits 0 cas命令命中数 cas_badval 0 cas数据类型错误数 touch_hits 0 touch命令命中数 3、ITEMS信息（stats items） 参数 值 描述 number 1 该slab中对象数（不包含过期对象） number_hot 0 number_warm 0 number_cold 1 age_hot 0 age_warm 0 age 284 LRU队列中最老对象的过期时间 evicted 0 LRU释放对象数 evicted_nonzero 0 设置了非0时间的LRU释放对象数 evicted_time 0 最后一次LRU释放的对象存在时间 outofmemory 0 不能存储对象次数 tailrepairs 0 修复slabs次数 reclaimed 35 使用过期对象空间存储对象次数 expired_unfetched 0 已过期但未获取的对象数目 evicted_unfetched 0 已驱逐但未获取的对象数目 evicted_active 0 crawler_reclaimed 0 crawler_items_checked 850 lrutail_reflocked 484 moves_to_cold 1004 moves_to_warm 968 moves_within_lru 15 direct_reclaims 0 hits_to_hot 1 hits_to_warm 19 hits_to_cold 1012 hits_to_temp 0 "},"db/redis.html":{"url":"db/redis.html","title":"1.2 redis","keywords":"","body":""},"db/mongodb.html":{"url":"db/mongodb.html","title":"1.3 mongodb","keywords":"","body":""},"db/sqlite3.html":{"url":"db/sqlite3.html","title":"1.4 sqlite3","keywords":"","body":""},"db/mysql.html":{"url":"db/mysql.html","title":"1.5 mysql","keywords":"","body":""},"php/php.html":{"url":"php/php.html","title":"2. PHP篇","keywords":"","body":""},"php/base.html":{"url":"php/base.html","title":"1.1 基础语法","keywords":"","body":""},"php/ext.html":{"url":"php/ext.html","title":"1.2 扩展库","keywords":"","body":""},"php/example.html":{"url":"php/example.html","title":"1.3 实战案例","keywords":"","body":""},"python/python.html":{"url":"python/python.html","title":"3. Python篇","keywords":"","body":""},"python/base.html":{"url":"python/base.html","title":"1.1 基础语法","keywords":"","body":""},"python/ext.html":{"url":"python/ext.html","title":"1.2 扩展库","keywords":"","body":""},"python/example.html":{"url":"python/example.html","title":"1.3 实战案例","keywords":"","body":""},"./":{"url":"./","title":"尾声","keywords":"","body":"有些情，只能止于唇齿，掩于岁月 卷首引：从此天涯陌路，天各一方。 从此互不来往，斩断情愫。 删除了记忆，清空了珍藏。 不再徘徊在彷徨的路上。 不再泪水央央度过夜的漫长。 崭新的一天湛蓝， 轻装上阵的舒畅。 风送来你的剪影， 搅乱了愁怀萦肠，望着你离开时走的那条路，蹲下身子，久久的看着，看着，直到细雨飘摇，直到天幕落下，直到无声的哽咽。 不知道这世上，还有多少人，能与你和我一般，初遇时便禁不住心动，仿佛认识了很久，我们是那么的相似，连说话的语气，处事的方式也是这么的相像，好像是遇见了另一个自己，明明还是那么陌生，却熟悉的像是老朋友。 越相似，越了解，也越明白对方，似乎能将彼此看透，知道你的心中带着的伤，想要走近，想要安抚，想要带着清风明月，为你黯然的生活，带去新的面貌。 你也知道我怀揣着的远方和过往，和未来的路将会走向何方，却只愿面对现在，绝口不提以后，也似乎还沉浸在，那些本该尘封的旧年月里。 明晰了彼此内心深处的所想，懂得了各自的固执和坚持，即便有些话不说出口，也知道分开的时候到了。我们之间是这样的了解，连告别也不再需要，只需要默契的不再联系，不再约定晨昏之时相伴，不再述说这一天，这许多天发生过什么事，看过什么值得一笑的话。 如果还有什么迷惑的话，那便是我不知道，我们之间算是什么，是爱，是吸引，或者只是有缘相伴一程，想了很久，也想不出这究竟是怎样的一种情感，姑且称它为情。 一日又一日过去，拉开了当初的距离，从熟悉到更熟悉，从更熟悉再到陌生，原来忘却只需要不再提起，人海之中的似曾相识，是一切开始的源头。似曾相识的源头，是有着相同的过去，有着同样不能忘怀的人，执拗的不肯放下，我们之间一步之遥的距离，便成了天涯海角的隔阂。 我们这样的一段情，只能止于唇齿，你这样的一个人，只能掩于岁月。不知道在失去的时候，那是一种什么样的感觉，有些酸涩，有些不甘，有些遗憾，却又深知，这一切是必然。遇见后相互牵引，是必然，相互深深的懂得，是必然，懂得之后放手，也是必然。 曾为这样的一个人，写过这样的一首《尘心》：情人滴泪夜娑婆，万花盛放饰人间，一树一叶尽尘缘，满目空待山河远。从相遇到相离，万花盛放到秋叶凋零，所有的期待成空，所有的向往变成了尘缘里的妄想。 于是慢慢的忘却，没有错，是忘却，将他丢在风里，斩断了情丝，重新过回一个人的日子。因为找到一个彼此懂得的人，是曾经最为的期待的爱情，遇到了这样的人，却只能分离，便需要忘记，让爱消失在记忆消失前。 止于唇齿，掩于岁月。 "}}